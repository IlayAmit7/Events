{"ast":null,"code":"import _asyncToGenerator from \"/Users/ilayamit/Downloads/Events-Test4-main/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  getAllEventsTypes() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const observable = _this.http.get(environment.eventsTypesUrl);\n\n      return yield firstValueFrom(observable);\n    })();\n  }\n\n  getAllEventsByType(eventTypeId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const observable = _this2.http.get(environment.eventsByTypeUrl + eventTypeId);\n\n      return yield firstValueFrom(observable);\n    })();\n  }\n\n  addEvent(event) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const observable = _this3.http.post(environment.eventsUrl, event);\n\n      return yield firstValueFrom(observable);\n    })();\n  }\n\n  deleteEvent(_id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const observable = _this4.http.delete(environment.eventsUrl + _id);\n\n      yield firstValueFrom(observable);\n    })();\n  }\n\n}\n\nEventService.ɵfac = function EventService_Factory(t) {\n  return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nEventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventService,\n  factory: EventService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,cAAT,QAA+B,MAA/B;AACA,SAASC,WAAT,QAA4B,8BAA5B;;;AAOA,OAAM,MAAOC,YAAP,CAAmB;EAErBC,YAAoBC,IAApB,EAAoC;IAAhB;EAAqB;;EAEnCC,iBAAiB;IAAA;;IAAA;MACnB,MAAMC,UAAU,GAAG,KAAI,CAACF,IAAL,CAAUG,GAAV,CAAgCN,WAAW,CAACO,cAA5C,CAAnB;;MACA,aAAaR,cAAc,CAACM,UAAD,CAA3B;IAFmB;EAGtB;;EAEKG,kBAAkB,CAACC,WAAD,EAAoB;IAAA;;IAAA;MACxC,MAAMJ,UAAU,GAAG,MAAI,CAACF,IAAL,CAAUG,GAAV,CAA4BN,WAAW,CAACU,eAAZ,GAA8BD,WAA1D,CAAnB;;MACA,aAAaV,cAAc,CAACM,UAAD,CAA3B;IAFwC;EAG3C;;EAEKM,QAAQ,CAACC,KAAD,EAAkB;IAAA;;IAAA;MAC5B,MAAMP,UAAU,GAAG,MAAI,CAACF,IAAL,CAAUU,IAAV,CAA2Bb,WAAW,CAACc,SAAvC,EAAkDF,KAAlD,CAAnB;;MACA,aAAab,cAAc,CAACM,UAAD,CAA3B;IAF4B;EAG/B;;EAEKU,WAAW,CAACC,GAAD,EAAY;IAAA;;IAAA;MACzB,MAAMX,UAAU,GAAG,MAAI,CAACF,IAAL,CAAUc,MAAV,CAA6BjB,WAAW,CAACc,SAAZ,GAAwBE,GAArD,CAAnB;;MACA,MAAMjB,cAAc,CAACM,UAAD,CAApB;IAFyB;EAG5B;;AAtBoB;;;mBAAZJ,cAAYiB;AAAA;;;SAAZjB;EAAYkB,SAAZlB,YAAY;EAAAmB,YAFT","names":["firstValueFrom","environment","EventService","constructor","http","getAllEventsTypes","observable","get","eventsTypesUrl","getAllEventsByType","eventTypeId","eventsByTypeUrl","addEvent","event","post","eventsUrl","deleteEvent","_id","delete","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/ilayamit/Downloads/Events-Test4-main/Frontend/src/app/services/event.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { EventModel } from '../models/event-model.model';\nimport { EventTypeModel } from '../models/eventType-model.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EventService {\n\n    constructor(private http: HttpClient) { }\n\n    async getAllEventsTypes(): Promise<EventTypeModel[]> {\n        const observable = this.http.get<EventTypeModel[]>(environment.eventsTypesUrl);\n        return await firstValueFrom(observable);\n    }\n\n    async getAllEventsByType(eventTypeId: string): Promise<EventModel[]> {\n        const observable = this.http.get<EventModel[]>(environment.eventsByTypeUrl + eventTypeId);\n        return await firstValueFrom(observable);\n    }\n\n    async addEvent(event: EventModel): Promise<EventModel> {\n        const observable = this.http.post<EventModel>(environment.eventsUrl, event);\n        return await firstValueFrom(observable);\n    }\n\n    async deleteEvent(_id: string): Promise<void> {\n        const observable = this.http.delete<EventModel>(environment.eventsUrl + _id);\n        await firstValueFrom(observable);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}